AWSTemplateFormatVersion: "2010-09-09"
Description: "Create VPC"

# ------------------------------------------------------------#
#  Parameters
# ------------------------------------------------------------#
Parameters:
  Project:
    Type: String
    Default: playground

  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnetACidr:
    Type: String
    Default: "10.0.1.0/24"

  PublicSubnetCCidr:
    Type: String
    Default: "10.0.2.0/24"

  PrivateSubnetACidr:
    Type: String
    Default: "10.0.10.0/24"

  PrivateSubnetCCidr:
    Type: String
    Default: "10.0.20.0/24"

# ------------------------------------------------------------#
#  Resources
# ------------------------------------------------------------#
Resources:
  # ------------------------------------------------------------#
  #  VPC
  # ------------------------------------------------------------#
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${Project}-vpc"

  # ------------------------------------------------------------#
  #  Internet GW
  # ------------------------------------------------------------#
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Project}-igw"

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # ------------------------------------------------------------#
  #  Subnet
  # ------------------------------------------------------------#
  # Public SubnetA
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref PublicSubnetACidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-public-subnet-a"

  # Public SubnetC
  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref PublicSubnetCCidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-public-subnet-c"

  # Private SubnetA
  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref PrivateSubnetACidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-private-subnet-a"

  # Private SubnetC
  PrivateSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref PrivateSubnetCCidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-private-subnet-c"

  # ------------------------------------------------------------#
  #  RouteTable
  # ------------------------------------------------------------#
  # Public RouteTableA
  PublicRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-public-route-a"

  # Public RouteTableC
  PublicRouteTableC:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-public-route-c"

  # Private RouteTableA
  PrivateRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-private-route-a"

  # Private RouteTableC
  PrivateRouteTableC:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Project}-private-route-c"

  # ------------------------------------------------------------#
  # Routing
  # ------------------------------------------------------------#
  # PublicRouteA Create
  PublicRouteA:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # PublicRouteC Create
  PublicRouteC:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # ------------------------------------------------------------#
  # RouteTable Associate
  # ------------------------------------------------------------#
  # PublicRouteTable Associate SubnetA
  PublicSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  # PublicRouteTable Associate SubnetC
  PublicSubnetCRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTableC

  # PrivateRouteTable Associate SubnetA
  PrivateSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  # PrivateRouteTable Associate SubnetC
  PrivateSubnetCRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC

# ------------------------------------------------------------#
#  Outputs
# ------------------------------------------------------------#
Outputs:
  MainVpc:
    Value: !Ref VPC
    Export:
      Name: 'vpc-id'